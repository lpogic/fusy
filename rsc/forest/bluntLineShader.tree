vertex [ GLSL"

#version 330 core
layout (location = 0) in vec2 pos0;
layout (location = 1) in vec2 pos1;
layout (location = 2) in float thick;
layout (location = 3) in float rad;
layout (location = 4) in vec4 col;

uniform vec2 wallSize;

out VS_OUT {
    mat2 rot;
    float width;
    float height;
    vec4 color;
} vs_out;

void main()
{
    float ar = wallSize.x / wallSize.y;
    float x = (pos1.x + pos0.x) / wallSize.x - 1;
    float y = -(pos1.y + pos0.y) / wallSize.y + 1;
    float length = sqrt(pow(pos1.x - pos0.x, 2.0) + pow(pos1.y - pos0.y, 2.0));
    float c = (pos1.x - pos0.x) / length;
    float s = (pos1.y - pos0.y) / length;
    gl_Position = vec4(x, y, rad, 1);
    vs_out.rot = mat2(c, -s * ar, s / ar, c);
    vs_out.width = (length + thick) / wallSize.x;
    vs_out.height = thick / wallSize.y;
    vs_out.color = col;
}

"GLSL ]


geometry [ GLSL"

#version 330 core
layout (points) in;
layout (triangle_strip, max_vertices = 36) out;

in VS_OUT {
    mat2 rot;
    float width;
    float height;
    vec4 color;
} gs_in[];

uniform vec2 wallSize;

out vec4 c;
out vec4 p;

void emit(vec4 pos)
{
    vec4 position = vec4(pos.xy, 0, 1);
    vec4 c0 = vec4(gs_in[0].color.rgb, 0);
    vec4 c1 = gs_in[0].color;
    vec2 sm = vec2(3.0 / wallSize.x, 3.0 / wallSize.y);
    float smr = 1.5;
    vec2 r = vec2(pos.z / wallSize.x, pos.z / wallSize.y);
    p = vec4(0,0,0,0);
    c = c0;
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x, -gs_in[0].height), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x, -gs_in[0].height), 0 ,0);
    EmitVertex();
    c = c1;
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x, -gs_in[0].height + sm.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x, -gs_in[0].height + sm.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x, gs_in[0].height - sm.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x, gs_in[0].height - sm.y), 0 ,0);
    EmitVertex();
    c = c0;
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x, gs_in[0].height), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x, gs_in[0].height), 0 ,0);
    EmitVertex();
    EndPrimitive();

    c = c0;
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width,  gs_in[0].height - r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width, -gs_in[0].height + r.y), 0 ,0);
    EmitVertex();
    c = c1;
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + sm.x,  gs_in[0].height - r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + sm.x, -gs_in[0].height + r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x,  gs_in[0].height - r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x, -gs_in[0].height + r.y), 0 ,0);
    EmitVertex();
    EndPrimitive();

    c = c0;
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width,  gs_in[0].height - r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width, -gs_in[0].height + r.y), 0 ,0);
    EmitVertex();
    c = c1;
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - sm.x,  gs_in[0].height - r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - sm.x, -gs_in[0].height + r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x,  gs_in[0].height - r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x, -gs_in[0].height + r.y), 0 ,0);
    EmitVertex();
    EndPrimitive();

    vec4 p0;
    c = c1;
    p0 = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x,  gs_in[0].height - r.y), 0, 0);
    p = vec4((p0.x + 1) / 2 * wallSize.x,  (p0.y + 1) / 2 * wallSize.y, pos.z / 2, smr);
    gl_Position = p0;
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x,  gs_in[0].height), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width,  gs_in[0].height - r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width,  gs_in[0].height), 0 ,0);
    EmitVertex();
    EndPrimitive();

    p0 = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x, -gs_in[0].height + r.y), 0 ,0);
    p = vec4((p0.x + 1) / 2 * wallSize.x,  (p0.y + 1) / 2 * wallSize.y, pos.z / 2, smr);
    gl_Position = p0;
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width - r.x, -gs_in[0].height), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width, -gs_in[0].height + r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2( gs_in[0].width, -gs_in[0].height), 0 ,0);
    EmitVertex();
    EndPrimitive();

    p0 = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x,  gs_in[0].height - r.y), 0 ,0);
    p = vec4((p0.x + 1) / 2 * wallSize.x,  (p0.y + 1) / 2 * wallSize.y, pos.z / 2, smr);
    gl_Position = p0;
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x,  gs_in[0].height), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width,  gs_in[0].height - r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width,  gs_in[0].height), 0 ,0);
    EmitVertex();
    EndPrimitive();

    p0 = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x, -gs_in[0].height + r.y), 0 ,0);
    p = vec4((p0.x + 1) / 2 * wallSize.x,  (p0.y + 1) / 2 * wallSize.y, pos.z / 2, smr);
    gl_Position = p0;
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width + r.x, -gs_in[0].height), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width, -gs_in[0].height + r.y), 0 ,0);
    EmitVertex();
    gl_Position = position + vec4(gs_in[0].rot * vec2(-gs_in[0].width, -gs_in[0].height), 0 ,0);
    EmitVertex();
    EndPrimitive();
}

void main() {
    emit(gl_in[0].gl_Position);
}

"GLSL ]


fragment [ GLSL"

#version 330 core
in vec4 c;
in vec4 p;
out vec4 color;

void main()
{
    if(p.z > 0) {
        float x = p.x - gl_FragCoord.x;
        float y = p.y - gl_FragCoord.y;
        float d = p.z - sqrt(x * x + y * y);
        if(d < 0) color = vec4(0,0,0,0);
        else if(d < p.a) color = vec4(c.rgb, c.a * d / p.a);
        else color = c;
    } else color = c;
}

"GLSL ]