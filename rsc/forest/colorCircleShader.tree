vertex [ GLSL"

#version 330 core
layout (location = 0) in vec2 pos;
layout (location = 1) in float rad;
layout (location = 2) in vec4 col;

uniform vec2 wallSize;

out VS_OUT {
    vec4 color;
} vs_out;

void main()
{
    gl_Position = vec4(pos.x, pos.y, rad, 1);
    vs_out.color = col;
}

"GLSL ]


geometry [ GLSL"

#version 330 core
layout (points) in;
layout (triangle_strip, max_vertices = 4) out;

uniform vec2 wallSize;

in VS_OUT {
    vec4 color;
} gs_in[];

out vec4 c;
out vec4 p;

void emit(vec4 position)
{
    c = gs_in[0].color;
    p = vec4(position.x, wallSize.y - position.y, position.b, 1.5);
    float w = position.b * 2 / wallSize.x;
    float h = position.b * 2 / wallSize.y;
    vec2 pos = vec2(position.x / wallSize.x * 2 - 1, -position.y / wallSize.y * 2 + 1);
    gl_Position = vec4(pos.x - w, pos.y - h, 0.0, 1.0); // 1:bottom-left
    EmitVertex();
    gl_Position = vec4(pos.x + w, pos.y - h, 0.0, 1.0); // 2:bottom-right
    EmitVertex();
    gl_Position = vec4(pos.x - w, pos.y + h, 0.0, 1.0); // 3:top-left
    EmitVertex();
    gl_Position = vec4(pos.x + w, pos.y + h, 0.0, 1.0); // 4:top-right
    EmitVertex();
    EndPrimitive();
}

void main() {
    emit(gl_in[0].gl_Position);
}

"GLSL ]


fragment [ GLSL"

#version 330 core
in vec4 c;
in vec4 p;
out vec4 color;

void main()
{
    float x = p.x - gl_FragCoord.x;
    float y = p.y - gl_FragCoord.y;
    float d = p.z - sqrt(x * x + y * y);
    if(d < 0) discard;
    else if(d < p.w) color = vec4(c.rgb, c.a * d / p.w);
    else color = c;
}

"GLSL ]