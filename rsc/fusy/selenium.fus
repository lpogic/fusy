@build classpath %lib/selenium.jar
@import java.time.Duration

@import org.openqa.selenium.*
@import org.openqa.selenium.interactions.Actions
@import org.openqa.selenium.support.locators.RelativeLocator
@import org.openqa.selenium.support.ui.Select
@import org.openqa.selenium.chrome.ChromeDriver
@import org.openqa.selenium.chrome.ChromeOptions

@WebDriver driver
@WebDriver driver() > driver <

@void setDriver(String type)
  switch type
    case .chrome
      System:setProperty("webdriver.chrome.driver", Fusy.home + `\bin\chromedriver.exe`)
      driver = new ChromeDriver()
    rest drop "unsupported web driver {type}"
  <
<

@boolean checkFlag(Subject s, Object f) return s:present(f) && s:in(f):orGiven(true) <

@void setDriver(Subject params)
  switch #type(params:.type:asString)
    case .chrome
      System:setProperty("webdriver.chrome.driver", params:.location:orGiven(Fusy.home + `\bin\chromedriver.exe`))
      #options = new ChromeOptions()
      if checkFlag(params, .headless), options:setHeadless(true)
      driver = new ChromeDriver(options)
      if params:present(.timeout), globalTimeout(params:.timeout:long)
    rest drop "unsupported web driver {type}"
  <
<

@void close()
  driver:quit
<

@void globalTimeout(long ms)
  driver:manage:timeouts:implicitlyWait(Duration.ofMillis(ms))
<

@WebElement findOne(String selector)
  try, return driver.findElement(By.cssSelector(selector)) catch, return null
<

@WebElement findOne(String selector, boolean displayedOnly)
  #e = findOne(selector)
  if !displayedOnly || e @/, return e
  return e:isDisplayed ? e !! null
<

@Subject find(String selector)
  return []:setEntire(driver.findElements(By.cssSelector(selector)))
<

@WebElement findOne(WebElement parent, String selector)
  try, return parent.findElement(By.cssSelector(selector)) catch, return null
<

@WebElement findOne(WebElement parent, String selector, boolean displayedOnly)
  #e = findOne(parent, selector)
  if !displayedOnly || e @/, return e
  return e:isDisplayed ? e !! null
<

@Subject find(WebElement parent, String selector)
  return []:setEntire(parent.findElements(By.cssSelector(selector)))
<

@WebElement parent(WebElement child)
  return child:findElement(By:xpath("./.."))
<

@WebElement getActive() > driver:switchTo:activeElement <

@WebElement findOneText(String text)
  try, return driver.findElement(By.partialLinkText(text)) catch, return null
<

@/keyDown(Keys key)
  new Actions(driver):keyDown(key):perform
<

@/keyUp(Keys key)
  new Actions(driver):keyUp(key):perform
<

@Subject script(String script)
  return [ @JavascriptExecutor(driver):executeScript(script) ]
<